Python has several built-in data types that represent different kinds of values and objects. These data types are categorized as follows:

Numeric Types:

int: Integer values (e.g., 5, -10)

float: Floating-point numbers (e.g., 3.14, -0.001)

complex: Complex numbers with real and imaginary parts (e.g., 1+2j)

Text Type:

str: Sequence of Unicode characters, representing text (e.g., "Hello")

Sequence Types:

list: Ordered, mutable collection of items (e.g., )wikipedia+2â€‹

tuple: Ordered, immutable collection of items (e.g., (1, 2, 3))

range: Immutable sequence of numbers, commonly used in loops

Mapping Type:

dict: Collection of key-value pairs (e.g., {"name": "Alice", "age": 25})

Set Types:

set: Unordered collection of unique elements (e.g., {1, 2, 3})

frozenset: Immutable version of a set

Boolean Type:

bool: Represents True or False values

Binary Types:

bytes: Immutable sequence of bytes

bytearray: Mutable sequence of bytes

memoryview: Memory view of binary data, allows efficient data manipulation

None Type:

NoneType: Represents the absence of a value, represented by None

Python is dynamically typed, meaning variables can hold any of these types and the type is set based on the value assigned. The type of a variable or value can be checked using the built-in function type().

Example:



python
x = 10         # int
y = 3.14       # float
z = 1+2j       # complex
s = "Hello"    # str
lst = [1, 2]   # list
tup = (1, 2)   # tuple
d = {"a": 1}   # dict
b = True       # bool
These data types form the foundation for representing and manipulating data in Python programs.

screenshot:

